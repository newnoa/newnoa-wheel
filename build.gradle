plugins {
    id "idea"
    id "java"
    id "java-library"

    id "pmd"
    id "jacoco"
    id "checkstyle"
    id "project-report"

    alias libs.plugins.springboot apply false
    alias libs.plugins.spotless
    alias libs.plugins.spotbugs
    alias libs.plugins.sonarqube
    alias libs.plugins.graalvm.build.native
    alias libs.plugins.dependency.check
    alias libs.plugins.smart.doc
}

group = "com.newnoa"
version hasProperty("VERSION") ? property("VERSION") : "1.0.0"
println "version: ${version}"
ext.env = hasProperty("env") ? property("env") : null
println "${project.name} env: ${env}"
ext.neo4jEmbedded = hasProperty("neo4jEmbedded") ? property("neo4jEmbedded") : 'false'
subprojects {
    apply plugin: "idea"
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "org.sonarqube"
    apply plugin: "org.owasp.dependencycheck"
    apply plugin: "io.spring.dependency-management"

    apply from: rootProject.file("gradle/jacoco.gradle")
    apply from: rootProject.file("gradle/test.gradle")

    if (env == 'dev' || env == 'sit') {
        apply from: rootProject.file("gradle/spotless.gradle")
        apply from: rootProject.file("gradle/checkstyle.gradle")
        apply from: rootProject.file("gradle/pmd.gradle")
        apply from: rootProject.file("gradle/spotbugs.gradle")
        apply from: rootProject.file("gradle/sonarqube.gradle")
        apply from: rootProject.file("gradle/smart-doc.gradle")
    }

    repositories {
        maven {
            url "http://nexus.newnoa.com/repository/newnoa/"
            allowInsecureProtocol true
        }
    }

    dependencies {
        implementation platform(libs.jackson.bom)
        implementation platform(libs.spring.boot.starter.parent)
        implementation platform(libs.spring.boot.dependencies)
        implementation platform(libs.spring.cloud.dependencies)
        testImplementation platform(libs.junit.bom)
        testImplementation(libs.junit.jupiter.api)
        testRuntimeOnly(libs.junit.jupiter.engine)

        testImplementation(libs.junit.platform.runner) {
            exclude group: "junit", module: "junit"
        }
        testRuntimeClasspath(libs.junit.platform.launcher)
        testRuntimeClasspath(libs.junit.platform.console)
        testImplementation(libs.spotbugs.annotations)
        testImplementation(libs.spring.boot.starter.test)
        compileOnly(libs.lombok)
        annotationProcessor(libs.lombok)
        testCompileOnly(libs.lombok)
        testAnnotationProcessor(libs.lombok)
        annotationProcessor(libs.spring.boot.configuration.processor)


        implementation(libs.bundles.spring.boot.starter.slf4j.logback)
        implementation(libs.bundles.jackson)
        implementation(libs.jakarta.transaction.api)
        implementation(libs.joda.time)
        implementation(libs.guava)
        implementation files("D:/newnoa/newnoa-common/build/libs/newnoa-common.jar")
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    compileJava {
        options.encoding = "UTF-8"
        options.compilerArgs.add("-Xlint:unchecked")
        options.compilerArgs.add("-Xlint:deprecation")
        options.compilerArgs.add("--enable-preview")
        options.compilerArgs.add("--add-exports=java.desktop/sun.font=ALL-UNNAMED")
        options.compilerArgs.add("--add-exports=java.base/sun.reflect.generics.tree=ALL-UNNAMED")
        options.compilerArgs.add("--add-exports=java.base/sun.net.www.protocol.ftp=ALL-UNNAMED")
        options.compilerArgs.add("--add-exports=java.desktop/sun.awt=ALL-UNNAMED")
        options.compilerArgs.add("--add-exports=java.desktop/sun.font=ALL-UNNAMED")
    }
}

allprojects {
    configurations.all {
        //刷新本地缓存包
//        resolutionStrategy.cacheDynamicVersionsFor 0, "seconds"
//        resolutionStrategy.cacheChangingModulesFor 300, "seconds"
        resolutionStrategy {
            force "org.apiguardian:apiguardian-api:1.1.2"
            force "com.google.errorprone:error_prone_annotations:2.26.1"
            force "org.checkerframework:checker-qual:3.42.0"
            force "org.jboss.logging:jboss-logging:3.5.3.Final"
            force "com.fasterxml:classmate:1.6.0"
            force "io.projectreactor:reactor-core:3.6.4"
            force "org.hamcrest:hamcrest:2.2"
            force libs.byte.buddy
            force libs.byte.buddy.agent
            if (neo4jEmbedded == 'true') {
                force "com.google.protobuf:protobuf-java:3.25.1"
                force "commons-codec:commons-codec:1.16.1"
                force "org.apache.commons:commons-configuration2:2.10.1"
                force "org.apache.commons:commons-lang3:3.14.0"
                force "org.scala-lang:scala-library:2.13.10"
                force "org.checkerframework:checker-qual:3.42.0"
                force "org.ow2.asm:asm:9.6"
                force "io.netty:netty-buffer:4.1.107.Final"
                force "io.netty:netty-common:4.1.107.Final"
                force "io.netty:netty-transport-native-unix-common:4.1.107.Final"
                force "io.netty:netty-handler:4.1.107.Final"
                force "io.netty:netty-handler-proxy:4.1.107.Final"
                force "io.netty:netty-transport:4.1.107.Final"
                force "io.netty:netty-codec-http2:4.1.107.Final"
                force "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:2.17.0"
                force "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.17.0"
                force "com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:2.17.0"
                force libs.jakarta.ws.rs.api
                force libs.jakarta.activation.api
                force libs.jakarta.xml.bind.api
                force libs.log4j.core
                force libs.log4j.layout.template.json
            }
            failOnVersionConflict()
        }
    }
}