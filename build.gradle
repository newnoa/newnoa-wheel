plugins {
    id "idea"
    id "java"
    id "java-library"

    id "pmd"
    id "jacoco"
    id "checkstyle"
    id "project-report"

    alias libs.plugins.springboot apply false
    alias libs.plugins.spotless
    alias libs.plugins.spotbugs
    alias libs.plugins.sonarqube
    alias libs.plugins.graalvm.build.native
    alias libs.plugins.dependency.check
    alias libs.plugins.smart.doc
}

group = "com.newnoa"
version hasProperty("VERSION") ? property("VERSION") : "1.0.0"
println "version: ${version}"
ext.env = hasProperty("env") ? property("env") : null
println "${project.name} env: ${env}"
ext.neo4jEmbedded = hasProperty("neo4jEmbedded") ? property("neo4jEmbedded") : 'false'

allprojects {
    configurations.all {
        //刷新本地缓存包
        resolutionStrategy.cacheDynamicVersionsFor 0, "seconds"
        resolutionStrategy.cacheChangingModulesFor 300, "seconds"
        resolutionStrategy {
            force libs.spring.boot.starter.parent
            force libs.spring.cloud.dependencies
            force libs.junit.bom
            force libs.jackson.bom
            force libs.log4j.core
            force libs.log4j.layout.template.json
            force libs.byte.buddy
            force libs.byte.buddy.agent
            force "org.ow2.asm:asm:9.6"
        }
    }
}


subprojects {
    apply plugin: "idea"
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "org.sonarqube"
//    apply plugin: "com.github.spotbugs-base"
    apply plugin: "org.owasp.dependencycheck"
    apply plugin: "io.spring.dependency-management"

    apply from: rootProject.file("gradle/test.gradle")

    if (env == 'dev' || env == 'sit') {
        apply from: rootProject.file("gradle/spotless.gradle")
        apply from: rootProject.file("gradle/checkstyle.gradle")
        apply from: rootProject.file("gradle/pmd.gradle")
        apply from: rootProject.file("gradle/spotbugs.gradle")
        apply from: rootProject.file("gradle/jacoco.gradle")
        apply from: rootProject.file("gradle/sonarqube.gradle")
        apply from: rootProject.file("gradle/smart-doc.gradle")
    }

    repositories {
        maven {
            url "http://nexus.newnoa.com/repository/newnoa/"
            allowInsecureProtocol true
        }
    }

    dependencies {
        implementation platform(libs.jackson.bom)
        implementation platform(libs.spring.boot.starter.parent)
        implementation platform(libs.spring.cloud.dependencies)
        testImplementation platform(libs.junit.bom)
        testImplementation(libs.junit.jupiter.api)
        testRuntimeOnly(libs.junit.jupiter.engine)
        testImplementation(libs.junit.platform.runner) {
            exclude group: "junit", module: "junit"
        }
        testImplementation(libs.spotbugs.annotations)
        testImplementation(libs.spring.boot.starter.test)
        compileOnly(libs.lombok)
        annotationProcessor(libs.lombok)
        testCompileOnly(libs.lombok)
        testAnnotationProcessor(libs.lombok)
        annotationProcessor(libs.spring.boot.configuration.processor)


        implementation(libs.bundles.spring.boot.starter.slf4j.logback)
        implementation(libs.bundles.jackson)
        implementation(libs.byte.buddy)
        implementation(libs.byte.buddy.agent)
        implementation(libs.bundles.jakarta)
        implementation(libs.joda.time)
        implementation(libs.guava)
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    compileJava {
        options.encoding = "UTF-8"
        options.compilerArgs.add("-Xlint:unchecked")
        options.compilerArgs.add("-Xlint:deprecation")
        options.compilerArgs.add("--enable-preview")
        options.compilerArgs.add("--add-exports=java.desktop/sun.font=ALL-UNNAMED")
        options.compilerArgs.add("--add-exports=java.base/sun.reflect.generics.tree=ALL-UNNAMED")
        options.compilerArgs.add("--add-exports=java.base/sun.net.www.protocol.ftp=ALL-UNNAMED")
        options.compilerArgs.add("--add-exports=java.desktop/sun.awt=ALL-UNNAMED")
        options.compilerArgs.add("--add-exports=java.desktop/sun.font=ALL-UNNAMED")
    }

    compileTestJava {
        options.encoding = "UTF-8"
    }

    javadoc {
        options.encoding = "UTF-8"
    }
}